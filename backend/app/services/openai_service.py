"""
OpenAI service for AI-powered features
"""

import os
import httpx
import logging
from typing import List, Dict, Any, Optional
from app.schemas.ai import ChatMessage

logger = logging.getLogger(__name__)


class OpenAIService:
    """Service for interacting with OpenAI API."""
    
    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required")
        
        self.base_url = "https://api.openai.com/v1"
        self.default_model = "gpt-3.5-turbo"
        self.timeout = 30.0
    
    async def generate_scene_summary(
        self, 
        slugline: str, 
        scene_content: str
    ) -> str:
        """
        Generate a concise summary for a screenplay scene.
        
        Args:
            slugline: The scene heading/slugline
            scene_content: Full text content of the scene
            
        Returns:
            Generated scene summary
            
        Raises:
            Exception: If OpenAI API call fails
        """
        system_prompt = (
            "You are a screenplay analysis assistant. Summarize scenes concisely "
            "in 1-2 sentences, focusing on key actions, character dynamics, and plot progression."
        )
        
        user_prompt = f"Summarize this screenplay scene:\n\nSlugline: {slugline}\n\nContent:\n{scene_content}"
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": self.default_model,
                        "messages": messages,
                        "max_tokens": 150,
                        "temperature": 0.7
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"OpenAI API error: {response.status_code} - {response.text}")
                    raise Exception(f"OpenAI API error: {response.status_code}")
                
                data = response.json()
                summary = data["choices"][0]["message"]["content"].strip()
                
                if not summary:
                    raise Exception("No summary generated by OpenAI")
                
                return summary
                
        except httpx.TimeoutException:
            logger.error("OpenAI API request timed out")
            raise Exception("OpenAI API request timed out")
        except Exception as e:
            logger.error(f"Error generating scene summary: {str(e)}")
            raise
    
    async def generate_chat_response(
        self,
        messages: List[ChatMessage],
        scene_context: Optional[str] = None
    ) -> str:
        """
        Generate a chat response with optional scene context.
        
        Args:
            messages: List of chat messages for context
            scene_context: Optional context about recent scenes
            
        Returns:
            Generated chat response
            
        Raises:
            Exception: If OpenAI API call fails
        """
        # Build system prompt with context
        base_prompt = "You are an AI assistant helping with screenplay writing and analysis."
        
        if scene_context:
            system_prompt = f"""{base_prompt}

Here are the recent scenes from the current project:

{scene_context}

Use this context to provide relevant, specific advice about the screenplay. Reference scenes, characters, and plot points when helpful."""
        else:
            system_prompt = base_prompt
        
        # Prepare messages for OpenAI (limit to last 10 for context)
        openai_messages = [{"role": "system", "content": system_prompt}]
        
        # Add user messages (last 10)
        for msg in messages[-10:]:
            openai_messages.append({
                "role": msg.role,
                "content": msg.content
            })
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": self.default_model,
                        "messages": openai_messages,
                        "max_tokens": 500,
                        "temperature": 0.8
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"OpenAI API error: {response.status_code} - {response.text}")
                    raise Exception(f"OpenAI API error: {response.status_code}")
                
                data = response.json()
                assistant_message = data["choices"][0]["message"]["content"].strip()
                
                if not assistant_message:
                    raise Exception("No response generated by OpenAI")
                
                return assistant_message
                
        except httpx.TimeoutException:
            logger.error("OpenAI API request timed out")
            raise Exception("OpenAI API request timed out")
        except Exception as e:
            logger.error(f"Error generating chat response: {str(e)}")
            raise


# Global service instance
openai_service = OpenAIService()
