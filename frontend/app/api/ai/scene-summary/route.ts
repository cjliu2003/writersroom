/**
 * Scene Summary API Endpoint
 * Generates AI-powered scene summaries using OpenAI
 */

import { NextRequest, NextResponse } from 'next/server'

interface SceneSummaryRequest {
  projectId: string
  sceneId: string
  sceneContent: string
  slugline: string
}

interface SceneSummaryResponse {
  success: boolean
  summary?: string
  error?: string
}

export async function POST(request: NextRequest) {
  try {
    const { projectId, sceneId, sceneContent, slugline }: SceneSummaryRequest = await request.json()

    if (!projectId || !sceneId || !sceneContent) {
      return NextResponse.json({
        success: false,
        error: 'Missing required fields: projectId, sceneId, sceneContent'
      }, { status: 400 })
    }

    const openaiApiKey = process.env.OPENAI_API_KEY
    if (!openaiApiKey) {
      console.error('OPENAI_API_KEY not configured')
      return NextResponse.json({
        success: false,
        error: 'OpenAI API not configured'
      }, { status: 500 })
    }

    // Call OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'You are a screenplay analysis assistant. Summarize scenes concisely in 1-2 sentences, focusing on key actions, character dynamics, and plot progression.'
          },
          {
            role: 'user',
            content: `Summarize this screenplay scene:\n\nSlugline: ${slugline}\n\nContent:\n${sceneContent}`
          }
        ],
        max_tokens: 150,
        temperature: 0.7
      })
    })

    if (!openaiResponse.ok) {
      throw new Error(`OpenAI API error: ${openaiResponse.status}`)
    }

    const openaiData = await openaiResponse.json()
    const summary = openaiData.choices[0]?.message?.content?.trim()

    if (!summary) {
      throw new Error('No summary generated by OpenAI')
    }

    // Store summary in backend memory service
    const BACKEND_API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api'
    const memoryResponse = await fetch(`${BACKEND_API_URL}/memory/update`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        projectId,
        slugline,
        data: {
          summary,
          fullContent: sceneContent,
          timestamp: new Date()
        }
      })
    })

    if (!memoryResponse.ok) {
      console.warn('Failed to store summary in backend memory')
    }

    const response: SceneSummaryResponse = {
      success: true,
      summary
    }

    return NextResponse.json(response)

  } catch (error) {
    console.error('Scene summary generation error:', error)

    const response: SceneSummaryResponse = {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to generate scene summary'
    }

    return NextResponse.json(response, { status: 500 })
  }
}