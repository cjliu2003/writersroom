/**
 * AI Chat API Endpoint
 * Provides context-aware chat using project scenes and summaries
 */

import { NextRequest, NextResponse } from 'next/server'

interface ChatMessage {
  role: 'user' | 'assistant'
  content: string
  timestamp?: string
}

interface ChatRequest {
  projectId: string
  messages: ChatMessage[]
  includeScenes?: boolean
}

interface ChatResponse {
  success: boolean
  message?: ChatMessage
  error?: string
}

export async function POST(request: NextRequest) {
  try {
    const { projectId, messages, includeScenes = true }: ChatRequest = await request.json()

    if (!projectId || !messages || !Array.isArray(messages)) {
      return NextResponse.json({
        success: false,
        error: 'Missing required fields: projectId, messages'
      }, { status: 400 })
    }

    const openaiApiKey = process.env.OPENAI_API_KEY
    if (!openaiApiKey) {
      console.error('OPENAI_API_KEY not configured')
      return NextResponse.json({
        success: false,
        error: 'OpenAI API not configured'
      }, { status: 500 })
    }

    let contextPrompt = 'You are an AI assistant helping with screenplay writing and analysis.'

    // Load project context if requested
    if (includeScenes) {
      try {
        const BACKEND_API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api'
        const scenesResponse = await fetch(`${BACKEND_API_URL}/memory/recent?projectId=${projectId}&count=10`)

        if (scenesResponse.ok) {
          const scenesData = await scenesResponse.json()
          if (scenesData.success && scenesData.data && scenesData.data.length > 0) {
            const sceneContext = scenesData.data.map((scene: any) => {
              return `Scene: ${scene.slugline}\nSummary: ${scene.summary || 'No summary available'}`
            }).join('\n\n')

            contextPrompt = `You are an AI assistant helping with screenplay writing and analysis.

Here are the recent scenes from the current project:

${sceneContext}

Use this context to provide relevant, specific advice about the screenplay. Reference scenes, characters, and plot points when helpful.`
          }
        }
      } catch (error) {
        console.warn('Failed to load scene context:', error)
      }
    }

    // Prepare messages for OpenAI
    const openaiMessages = [
      {
        role: 'system' as const,
        content: contextPrompt
      },
      // Include last 10 messages for context
      ...messages.slice(-10).map(msg => ({
        role: msg.role,
        content: msg.content
      }))
    ]

    // Call OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: openaiMessages,
        max_tokens: 500,
        temperature: 0.8
      })
    })

    if (!openaiResponse.ok) {
      throw new Error(`OpenAI API error: ${openaiResponse.status}`)
    }

    const openaiData = await openaiResponse.json()
    const assistantMessage = openaiData.choices[0]?.message?.content?.trim()

    if (!assistantMessage) {
      throw new Error('No response generated by OpenAI')
    }

    const responseMessage: ChatMessage = {
      role: 'assistant',
      content: assistantMessage,
      timestamp: new Date().toISOString()
    }

    const response: ChatResponse = {
      success: true,
      message: responseMessage
    }

    return NextResponse.json(response)

  } catch (error) {
    console.error('Chat API error:', error)

    const response: ChatResponse = {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to generate chat response'
    }

    return NextResponse.json(response, { status: 500 })
  }
}